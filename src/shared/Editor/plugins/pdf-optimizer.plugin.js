/**
 * –ü–ª–∞–≥–∏–Ω –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥ PDF
 * - –ò–∑–º–µ—Ä—è–µ—Ç –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * - –í—Å—Ç–∞–≤–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä—ã page-break
 */

import { Jodit } from 'jodit';

const PAGE_HEIGHT = 900; // px - –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF (—Å –∑–∞–ø–∞—Å–æ–º –¥–ª—è —Ñ—É—Ç–µ—Ä–∞)
const PAGE_WIDTH = 1920; // px - —à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF
const CONTENT_PADDING = 50; // px - –æ—Ç—Å—Ç—É–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞

/**
 * –°–æ–∑–¥–∞–µ—Ç HTML –º–∞—Ä–∫–µ—Ä–∞ —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
export function createPageBreakHTML(pageNumber) {
  return `
    <div class="pdf-page-break" contenteditable="false" style="
      page-break-after: always;
      break-after: page;
      margin: 20px 0;
      padding: 10px;
      background: #e6f7ff;
      border: 2px dashed #1890ff;
      border-radius: 4px;
      text-align: center;
      color: #1890ff;
      font-size: 12px;
      font-weight: 600;
      cursor: default;
      user-select: none;
    ">
      üìÑ –†–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber})
    </div>
  `.trim();
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
 */
export function removeAllPageBreaks(editor) {
  const pageBreaks = editor.editor.querySelectorAll('.pdf-page-break');
  pageBreaks.forEach((el) => el.remove());
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
 */
export function calculateContentHeight(editor) {
  const editorElement = editor.editor;
  if (!editorElement) return 0;

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
  const tempContainer = document.createElement('div');
  tempContainer.style.cssText = `
    position: absolute;
    left: -9999px;
    top: -9999px;
    width: ${PAGE_WIDTH - CONTENT_PADDING * 2}px;
    visibility: hidden;
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
  `;

  // –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç (–±–µ–∑ page-breaks)
  const contentClone = editorElement.cloneNode(true);
  const pageBreaks = contentClone.querySelectorAll('.pdf-page-break');
  pageBreaks.forEach((el) => el.remove());

  tempContainer.innerHTML = contentClone.innerHTML;
  document.body.appendChild(tempContainer);

  const height = tempContainer.offsetHeight;
  document.body.removeChild(tempContainer);

  return height;
}

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (OL/UL) –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º LI
 * @param {HTMLElement} listElement - —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ (OL –∏–ª–∏ UL)
 * @param {number} pageLimit - –ª–∏–º–∏—Ç –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param {HTMLElement} measureContainer - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏–π
 * @param {number} availableHeight - –¥–æ—Å—Ç—É–ø–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @returns {Array<HTMLElement>} - –º–∞—Å—Å–∏–≤ –Ω–æ–≤—ã—Ö —Å–ø–∏—Å–∫–æ–≤
 */
function splitListElement(listElement, pageLimit, measureContainer, availableHeight = pageLimit) {
  console.log(`[PDF Optimizer] –†–∞–∑–±–∏–≤–∞—é —Å–ø–∏—Å–æ–∫ ${listElement.tagName}, –¥–æ—Å—Ç—É–ø–Ω–∞—è –≤—ã—Å–æ—Ç–∞: ${availableHeight}px`);

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ direct children LI
  const listItems = Array.from(listElement.children).filter(el => el.tagName === 'LI');

  if (listItems.length === 0) {
    return [listElement];
  }

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const groups = [];
  let currentGroup = [];
  let currentHeight = 0;
  let isFirstGroup = true;

  listItems.forEach((li, index) => {
    // –ò–∑–º–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É LI
    measureContainer.innerHTML = '';
    const tempList = listElement.cloneNode(false);
    tempList.appendChild(li.cloneNode(true));
    measureContainer.appendChild(tempList);
    const liHeight = measureContainer.offsetHeight;

    console.log(`[PDF Optimizer]   LI #${index}: ${liHeight}px, —Ç–µ–∫—É—â–∞—è –≤—ã—Å–æ—Ç–∞: ${currentHeight}px`);

    // –î–ª—è –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º availableHeight, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - pageLimit
    const currentLimit = isFirstGroup ? availableHeight : pageLimit;

    if (currentHeight + liHeight > currentLimit && currentGroup.length > 0) {
      // –ù–µ –≤–ª–µ–∑–∞–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
      console.log(`[PDF Optimizer]   LI –Ω–µ –≤–ª–µ–∑, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É (—ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${currentGroup.length})`);
      groups.push([...currentGroup]);
      currentGroup = [li];
      currentHeight = liHeight;
      isFirstGroup = false;
    } else {
      // –í–ª–µ–∑–∞–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
      currentGroup.push(li);
      currentHeight += liHeight;
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
  if (currentGroup.length > 0) {
    groups.push(currentGroup);
  }

  console.log(`[PDF Optimizer] –°–ø–∏—Å–æ–∫ —Ä–∞–∑–±–∏—Ç –Ω–∞ ${groups.length} —á–∞—Å—Ç–µ–π`);

  // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
  if (groups.length === 1) {
    return [listElement];
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
  let startNumber = 1;
  if (listElement.tagName === 'OL' && listElement.hasAttribute('start')) {
    startNumber = parseInt(listElement.getAttribute('start'), 10) || 1;
  }

  return groups.map((items, groupIndex) => {
    const newList = listElement.cloneNode(false); // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–≥, –±–µ–∑ –¥–µ—Ç–µ–π

    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    Array.from(listElement.attributes).forEach(attr => {
      newList.setAttribute(attr.name, attr.value);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã LI
    items.forEach(li => newList.appendChild(li.cloneNode(true)));

    // –î–ª—è OL —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
    if (listElement.tagName === 'OL' && groupIndex > 0) {
      const itemsBeforeCount = groups.slice(0, groupIndex).reduce((sum, g) => sum + g.length, 0);
      newList.setAttribute('start', startNumber + itemsBeforeCount);
      console.log(`[PDF Optimizer]   OL —á–∞—Å—Ç—å #${groupIndex + 1} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ${startNumber + itemsBeforeCount}`);
    }

    return newList;
  });
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è PDF - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–∞–Ω–∏—Ü
 * –í–ê–ñ–ù–û: –†–∞–∑–±–∏–≤–∞–µ—Ç –±–æ–ª—å—à–∏–µ —Å–ø–∏—Å–∫–∏ (OL/UL) –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –≤–ª–µ–∑–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
export function optimizeForPDF(editor) {
  console.log('[PDF Optimizer] –ù–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–∞–∑—Ä—ã–≤—ã
  removeAllPageBreaks(editor);

  const editorElement = editor.editor;
  if (!editorElement) {
    console.error('[PDF Optimizer] editorElement –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return 1;
  }

  // –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û top-level —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ!)
  const elements = Array.from(editorElement.children).filter(
    el => !el.classList.contains('pdf-page-break')
  );

  console.log('[PDF Optimizer] –ù–∞–π–¥–µ–Ω–æ top-level —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', elements.length);
  console.log('[PDF Optimizer] –¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', elements.map(el => el.tagName).join(', '));

  if (elements.length === 0) {
    console.error('[PDF Optimizer] –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    return 1;
  }

  // –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
  const measureContainer = document.createElement('div');
  measureContainer.style.cssText = `
    position: absolute;
    left: -9999px;
    top: -9999px;
    width: ${PAGE_WIDTH - CONTENT_PADDING * 2}px;
    visibility: hidden;
  `;

  // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  const editorStyles = window.getComputedStyle(editorElement);
  measureContainer.style.fontFamily = editorStyles.fontFamily;
  measureContainer.style.fontSize = editorStyles.fontSize;
  measureContainer.style.lineHeight = editorStyles.lineHeight;

  document.body.appendChild(measureContainer);

  const fragments = [];
  let currentFragment = [];
  let currentHeight = 0;
  let pageNumber = 1;
  const pageLimit = PAGE_HEIGHT - CONTENT_PADDING * 2;

  console.log('[PDF Optimizer] –õ–∏–º–∏—Ç –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageLimit, 'px');

  elements.forEach((el, index) => {
    // –ò–∑–º–µ—Ä—è–µ–º –ü–û–õ–ù–£–Æ –≤—ã—Å–æ—Ç—É —ç–ª–µ–º–µ–Ω—Ç–∞ (–≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
    const clone = el.cloneNode(true);
    measureContainer.innerHTML = '';
    measureContainer.appendChild(clone);
    const elHeight = measureContainer.offsetHeight;

    console.log(`[PDF Optimizer] –≠–ª–µ–º–µ–Ω—Ç #${index} (${el.tagName}): ${elHeight}px, —Ç–µ–∫—É—â–∞—è –≤—ã—Å–æ—Ç–∞: ${currentHeight}px`);

    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç - —Å–ø–∏—Å–æ–∫ –∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
    if ((el.tagName === 'OL' || el.tagName === 'UL') && elHeight > pageLimit) {
      console.log(`[PDF Optimizer] –≠–ª–µ–º–µ–Ω—Ç ${el.tagName} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${elHeight}px > ${pageLimit}px), —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏`);

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –≤—ã—Å–æ—Ç—É –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      const availableHeight = pageLimit - currentHeight;

      // –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏
      const listParts = splitListElement(el, pageLimit, measureContainer, availableHeight);

      console.log(`[PDF Optimizer] –°–ø–∏—Å–æ–∫ —Ä–∞–∑–±–∏—Ç –Ω–∞ ${listParts.length} —á–∞—Å—Ç–µ–π`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–ø–∏—Å–∫–∞
      listParts.forEach((listPart, partIndex) => {
        measureContainer.innerHTML = '';
        measureContainer.appendChild(listPart.cloneNode(true));
        const partHeight = measureContainer.offsetHeight;

        console.log(`[PDF Optimizer]   –ß–∞—Å—Ç—å #${partIndex + 1}: ${partHeight}px`);

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –∏ –æ–Ω–∞ –≤–ª–µ–∑–∞–µ—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if (partIndex === 0 && currentHeight + partHeight <= pageLimit) {
          currentFragment.push(listPart);
          currentHeight += partHeight;
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          if (currentFragment.length > 0) {
            fragments.push({
              elements: [...currentFragment],
              pageNumber: pageNumber++,
            });
            console.log(`[PDF Optimizer]   –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ #${pageNumber - 1}`);
          }

          currentFragment = [listPart];
          currentHeight = partHeight;
        }
      });

      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–ª–µ–∑–µ—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (currentHeight + elHeight > pageLimit && currentFragment.length > 0) {
      // –ù–µ –≤–ª–µ–∑–∞–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      console.log(`[PDF Optimizer] –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –≤–ª–µ–∑, —Å–æ–∑–¥–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É #${pageNumber}`);

      fragments.push({
        elements: [...currentFragment],
        pageNumber: pageNumber++,
      });

      currentFragment = [el];
      currentHeight = elHeight;
    } else {
      // –í–ª–µ–∑–∞–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
      currentFragment.push(el);
      currentHeight += elHeight;
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç
  if (currentFragment.length > 0) {
    fragments.push({
      elements: currentFragment,
      pageNumber: pageNumber,
    });
    console.log(`[PDF Optimizer] –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ #${pageNumber}`);
  }

  // –û—á–∏—â–∞–µ–º –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  document.body.removeChild(measureContainer);

  console.log('[PDF Optimizer] –í—Å–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü):', fragments.length);

  // –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ó–ê–ú–ï–ù–ò–¢–¨ –∏—Å—Ö–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –Ω–æ–≤—ã–µ (—Ä–∞–∑–±–∏—Ç—ã–µ)
  // –û—á–∏—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–Ω–æ–≤–æ
  editorElement.innerHTML = '';

  fragments.forEach((fragment, fragIndex) => {
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
    fragment.elements.forEach(el => {
      editorElement.appendChild(el);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
    if (fragIndex < fragments.length - 1) {
      const pageBreakEl = document.createElement('div');
      pageBreakEl.innerHTML = createPageBreakHTML(fragment.pageNumber + 1);
      const pageBreak = pageBreakEl.firstElementChild;
      editorElement.appendChild(pageBreak);

      console.log(`[PDF Optimizer] –í—Å—Ç–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä—ã–≤ –ø–µ—Ä–µ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π #${fragment.pageNumber + 1}`);
    }
  });

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
  editor.synchronizeValues();

  console.log('[PDF Optimizer] –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—Ç—Ä–∞–Ω–∏—Ü:', fragments.length);
  return fragments.length;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è PDF" –≤ toolbar
 */
export default function addPdfOptimizerPlugin(editor, onHeightChange) {
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –î–û –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ afterInit, –ø–æ—ç—Ç–æ–º—É –∫–Ω–æ–ø–∫–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞

  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã
  editor.events.on('change', () => {
    if (onHeightChange) {
      updateHeight(editor, onHeightChange);
    }
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  setTimeout(() => {
    if (onHeightChange) {
      updateHeight(editor, onHeightChange);
    }
  }, 300);
}

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –≤ Jodit (–Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –î–û —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞)
 */
export function registerPdfOptimizeButton() {
  if (!Jodit || !Jodit.defaultOptions) return;

  Jodit.defaultOptions.controls.pdfOptimize = {
    icon: '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>',
    tooltip: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è PDF (–∞–≤—Ç–æ-—Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)',
    exec: function (editor) {
      try {
        const pagesCount = optimizeForPDF(editor);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ Jodit
        editor.message.success(`–ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ ${pagesCount} —Å—Ç—Ä–∞–Ω–∏—Ü(—ã)`, 3000);

        // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ change –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        editor.events.fire('change', editor.value);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ PDF:', error);
        editor.message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', 3000);
      }
    }
  };
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Å–æ—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
function updateHeight(editor, callback) {
  const height = calculateContentHeight(editor);
  const pagesCount = Math.ceil(height / (PAGE_HEIGHT - CONTENT_PADDING * 2));

  callback({
    height,
    pagesCount,
    pageHeight: PAGE_HEIGHT,
  });
}
